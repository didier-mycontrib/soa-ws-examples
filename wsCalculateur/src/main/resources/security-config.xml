<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <!-- parametrage spring utile si filtre web DelegatingFilterProxy actif (dans web.xml)  -->
    <!-- 
    <security:http use-expressions="true"> 
        <security:intercept-url pattern="/index.html" access="permitAll" /> 
        <security:intercept-url pattern="/libre.jsp" access="permitAll" />
        <security:intercept-url pattern="/member.jsp" access="hasAnyRole('supervisor','teller')" /> 
        <security:intercept-url pattern="/**" access="denyAll" />         
        <security:form-login />
        <security:logout />
    </security:http>
    -->
    <!-- pour ne pas securiser les .css, ... -->
    <!--  <security:http pattern="/static/**" security="none" /> -->  
     
    
   <!-- pour encoder/decoder des mots de passe cryptés (encoder.encode("...")) 
   password="9992e040d32b6a688ff45b6e53fd0f5f1689c754ecf638cce5f09aa57a68be3c6dae699091e58324" 
   --> 
   <!-- <bean id="encoder" 
        class="org.springframework.security.crypto.password.StandardPasswordEncoder"/> -->

    <security:authentication-manager id="springSecurityAuthenticationManager">
        <security:authentication-provider>
        <!-- <security:password-encoder ref="encoder" /> -->
            <!-- en prod , via jdbc , ldap ou ... -->
            <security:user-service id="simpleUserDetailsService"> <!-- petite liste explicite pour tests (mode dev) -->
                <security:user name="admin" password="adminpwd" authorities="supervisor, teller, user" />
                <security:user name="user1" password="pwd1" authorities="user" />
                <security:user name="didier" password="didierpwd" authorities="teller, user" />
                <security:user name="user2" password="pwd2" authorities="user" />
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>
    
    <!-- <security:global-method-security pre-post-annotations="enabled" />
    pour tenir compte de @PreAuthorize("hasRole('supervisor') or hasRole('teller')")
    au dessus des méthodes des services Spring -->


</beans>